{
  "permissions": {
    "allow": [
      "Bash(mkdir:*)",
      "Bash(go mod:*)",
      "Bash(go:*)",
      "Bash(curl:*)",
      "Bash(sudo tar:*)",
      "Bash(tar:*)",
      "Bash(export PATH=$HOME/go/bin:$PATH)",
      "Bash(docker-compose up:*)",
      "Bash(docker-compose:*)",
      "Bash(for i in {1..12})",
      "Bash(do echo \"Request $i:\")",
      "Bash(done)",
      "Bash(docker exec:*)",
      "Bash(export APP_ENV=test)",
      "Bash(export DB_HOST=localhost)",
      "Bash(export DB_NAME=pytake_test_db)",
      "Bash(export REDIS_PASSWORD=pytake123)",
      "Bash(chmod:*)",
      "Bash(bash:*)",
      "Bash(./test_conversations.sh:*)",
      "Bash(taskkill:*)",
      "Bash(TASKKILL //F //PID 28952)",
      "Bash(git add:*)",
      "Bash(grep:*)",
      "Bash(touch:*)",
      "Bash(docker:*)",
      "Bash(./tests/validation/deployment_check.sh:*)",
      "Bash(git push:*)",
      "Bash(./dev.sh:*)",
      "Bash(openssl rand:*)",
      "Bash(./deploy-production.sh:*)",
      "Bash(sudo:*)",
      "Bash(certbot/certbot certonly:*)",
      "WebFetch(domain:api.pytake.net)",
      "Bash(git config:*)",
      "Bash(npx create-next-app:*)",
      "Bash(npx shadcn@latest init:*)",
      "Bash(npm install:*)",
      "Bash(./deploy-full.sh)",
      "Bash(npm run build:*)",
      "Bash(openssl req:*)",
      "Bash(npm run dev:*)",
      "Bash(npm run:*)",
      "Bash(cat:*)",
      "Bash(true)",
      "Bash(pkill:*)",
      "Bash(rm:*)",
      "Bash(kill:*)",
      "Bash(nslookup:*)",
      "Bash(./generate-ssl.sh:*)",
      "Bash(find:*)",
      "Bash(ls:*)",
      "Bash(mv:*)",
      "Bash(tree:*)",
      "Bash(npm cache clean:*)",
      "Bash(npx next:*)",
      "Bash(python3:*)",
      "Bash(npm create:*)",
      "Bash(./start-dev.sh:*)",
      "Bash(pm2 start:*)",
      "Bash(pm2 logs:*)",
      "Bash(pm2 stop:*)",
      "Bash(pm2 delete:*)",
      "Bash(npm start)",
      "Bash(PORT=3001 node server.js)",
      "Bash(time curl:*)",
      "Bash(npx tailwindcss init:*)",
      "Bash(cp:*)",
      "Bash(node:*)",
      "Bash(npx tsc:*)",
      "Bash(PORT=3002 npm run dev)",
      "Bash(screen:*)",
      "Bash(npm --version)",
      "Bash(nginx:alpine)",
      "Bash(echo:*)",
      "Bash(git commit:*)",
      "Bash(sed:*)",
      "Bash(PORT=8081 npm start)",
      "Bash(PORT=3003 npm run dev)",
      "Bash(psql:*)",
      "Bash(POSTGRES_HOST=localhost PORT=8081 npm start)",
      "Bash(PGPASSWORD=postgres psql -h localhost -U postgres -d postgres -f /home/administrator/pytake-backend/migrations/001_create_initial_tables.sql)",
      "Bash(postgres:15-alpine)",
      "Bash(PORT=3001 npm run dev)",
      "Bash(PORT=3004 npm run dev)",
      "Bash(PORT=3005 npm run dev)",
      "Bash(PORT=8080 npm run dev)",
      "Bash(PORT=8082 npm run dev)",
      "Bash(git checkout:*)",
      "Bash(PORT=3006 npm run dev)",
      "Bash(PORT=3007 npm run dev)",
      "Bash(for container in pytake-postgres-new pytake-redis nextjs-frontend pytake-nginx)",
      "Bash(do docker inspect $container --format=\"{{.Name}}: {{range $net, $v := .NetworkSettings.Networks}}{{$net}} {{end}}\")",
      "Bash(./setup-letsencrypt.sh:*)",
      "Bash(npm uninstall:*)",
      "Bash(NODE_OPTIONS=\"--max-old-space-size=2048\" npx next dev -p 3008)",
      "Bash(DEBUG=*)",
      "Bash(./start-server.sh:*)",
      "Bash(npm ls:*)",
      "Bash(ping:*)",
      "Bash(pm2 list:*)",
      "Bash(DISABLE_ESLINT=true npx next build --no-lint)",
      "Bash(./clear-cache.sh:*)",
      "Bash(__NEW_LINE__ echo -e \"\\nConteúdo do docker-compose.yml (primeiras 30 linhas):\")",
      "Bash(__NEW_LINE__ echo -e \"\\n1. Verificando configuração atual do nginx dentro do container:\")",
      "Bash(__NEW_LINE__ echo -e \"\\n2. Listando TODAS as configurações nginx:\")",
      "Bash(__NEW_LINE__ echo -e \"\\n3. Verificando se há conflitos de configuração:\")",
      "Bash(__NEW_LINE__ echo -e \"\\n---\\nVerificando app.conf:\")",
      "Bash(__NEW_LINE__ echo -e \"\\n1. ✅ localStorage REMOVIDO do código\")",
      "Bash(__NEW_LINE__ echo -e \"\\nTeste manual:\")",
      "Bash(__NEW_LINE__ echo -e \"\\nTeste alternativo direto:\")",
      "Bash(__NEW_LINE__ echo -e \"\\nSe ainda não funcionar:\")",
      "Bash(__NEW_LINE__ echo -e \"\\n1. Parando frontend:\")",
      "Bash(__NEW_LINE__ echo -e \"\\n2. Removendo container:\")",
      "Bash(__NEW_LINE__ echo -e \"\\n3. Limpando cache do node dentro do volume:\")",
      "Bash(__NEW_LINE__ echo -e \"\\n4. Recriando frontend:\")",
      "Bash(__NEW_LINE__ echo -e \"\\n5. Aguardando inicialização...\")",
      "Bash(__NEW_LINE__ echo -e \"\\n6. Verificando logs:\")",
      "Bash(rsync:*)",
      "Bash(__NEW_LINE__ echo -e \"\\n1. Fazendo backup do docker-compose atual:\")",
      "Bash(__NEW_LINE__ echo -e \"\\n2. Aplicando nova configuração:\")",
      "Bash(__NEW_LINE__ echo -e \"\\n3. Parando containers atuais:\")",
      "Bash(__NEW_LINE__ echo -e \"\\n4. Removendo containers antigos para rebuild:\")",
      "Bash(__NEW_LINE__ echo -e \"\\n5. Construindo e iniciando nova estrutura:\")",
      "Bash(__NEW_LINE__ echo \"Verificando arquivos gerados:\")",
      "Bash(ss:*)",
      "Bash(systemctl status:*)",
      "Bash(wget:*)",
      "Bash(tcpdump:*)",
      "Bash(dig +short:*)",
      "Bash(dig:*)",
      "Bash(PGPASSWORD=postgres psql -h localhost -p 5433 -U postgres -d pytake_db -c \"SELECT id, name, description, status, created_at FROM flows ORDER BY created_at DESC LIMIT 5;\")"
    ],
    "deny": [],
    "additionalDirectories": [
      "/tmp"
    ]
  },
  "hooks": {
    "PostToolUse": [
      {
        "matcher": "Edit|MultiEdit|Write",
        "hooks": [
          {
            "type": "command",
            "command": "if [[ -n \"$CLAUDE_TOOL_FILE_PATH\" ]] && git rev-parse --git-dir >/dev/null 2>&1; then git add \"$CLAUDE_TOOL_FILE_PATH\" 2>/dev/null || true; fi"
          }
        ]
      },
      {
        "matcher": "Edit|MultiEdit|Write",
        "hooks": [
          {
            "type": "command",
            "command": "if [[ -n \"$CLAUDE_TOOL_FILE_PATH\" ]] && git rev-parse --git-dir >/dev/null 2>&1; then git add \"$CLAUDE_TOOL_FILE_PATH\" 2>/dev/null || true; fi"
          }
        ]
      }
    ]
  }
}