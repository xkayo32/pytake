version: '3.8'

services:
  # PostgreSQL Database - Secure Configuration
  postgres:
    image: postgres:15-alpine
    container_name: pytake-postgres-secure
    environment:
      POSTGRES_DB: pytake_production
      POSTGRES_USER: pytake_admin
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-Odc7/ffNnTnG4hkbwV+Sx2ZgK61rXW2r9U2o7Rd25DU=}
      POSTGRES_INITDB_ARGS: "--auth-local=scram-sha-256 --auth-host=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-secure.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "127.0.0.1:5432:5432"  # Only bind to localhost
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U pytake_admin -d pytake_production"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - pytake-secure-network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    read_only: false
    tmpfs:
      - /tmp
      - /run/postgresql

  # Redis Cache - Secure Configuration
  redis:
    image: redis:7-alpine
    container_name: pytake-redis-secure
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD:-gOe7JRn+i8iWY5UAvYt3mJxBFJnAf9+jo/VZM3UN4xw=}
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --appendonly yes
      --appendfilename "appendonly.aof"
      --dbfilename dump.rdb
      --stop-writes-on-bgsave-error yes
      --rdbcompression yes
      --rdbchecksum yes
      --protected-mode yes
      --tcp-backlog 511
      --tcp-keepalive 300
      --timeout 0
    ports:
      - "127.0.0.1:6379:6379"  # Only bind to localhost
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - pytake-secure-network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    sysctls:
      - net.core.somaxconn=1024

  # Backend API - Secure Configuration
  backend:
    build:
      context: .
      dockerfile: Dockerfile.secure
      args:
        - BUILD_ENV=production
    container_name: pytake-backend-secure
    environment:
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: ${REDIS_URL}
      JWT_SECRET: ${JWT_SECRET:-0lKDucCTqSt0gh1mbLsvF/d5mhXqCtEW8JfwWwbTeIk=}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      API_HOST: 0.0.0.0
      API_PORT: 8080
      RUST_LOG: ${LOG_LEVEL:-info}
      NODE_ENV: production
      FORCE_HTTPS: "true"
    ports:
      - "127.0.0.1:8080:8080"  # Only bind to localhost
    networks:
      - pytake-secure-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    read_only: true
    tmpfs:
      - /tmp
    volumes:
      - ./uploads:/app/uploads:rw
      - ./logs:/app/logs:rw
    user: "1000:1000"  # Non-root user

  # Nginx Reverse Proxy - Secure Configuration
  nginx:
    image: nginx:alpine
    container_name: pytake-nginx-secure
    volumes:
      - ./nginx-secure.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./nginx-logs:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    networks:
      - pytake-secure-network
    depends_on:
      - backend
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
      - CHOWN
      - DAC_OVERRIDE
      - SETGID
      - SETUID
    read_only: true
    tmpfs:
      - /var/cache/nginx
      - /var/run

networks:
  pytake-secure-network:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: br-pytake-secure
    ipam:
      config:
        - subnet: 172.25.0.0/16

volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/postgres
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/redis