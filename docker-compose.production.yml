version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: pytake-postgres-prod
    restart: always
    environment:
      POSTGRES_DB: pytake_production
      POSTGRES_USER: pytake_admin
      POSTGRES_PASSWORD: Odc7/ffNnTnG4hkbwV+Sx2ZgK61rXW2r9U2o7Rd25DU=
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-secure.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U pytake_admin -d pytake_production"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - pytake-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: pytake-redis-prod
    restart: always
    command: >
      redis-server
      --requirepass gOe7JRn+i8iWY5UAvYt3mJxBFJnAf9+jo/VZM3UN4xw=
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --appendonly yes
      --appendfsync everysec
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "gOe7JRn+i8iWY5UAvYt3mJxBFJnAf9+jo/VZM3UN4xw=", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - pytake-network

  # Backend API (Mock for now, will be replaced with Rust)
  backend:
    build:
      context: .
      dockerfile: Dockerfile.mock
    container_name: pytake-backend-prod
    restart: always
    environment:
      NODE_ENV: production
      PORT: 8080
      DATABASE_URL: postgres://pytake_admin:Odc7/ffNnTnG4hkbwV+Sx2ZgK61rXW2r9U2o7Rd25DU=@postgres:5432/pytake_production
      REDIS_URL: redis://default:gOe7JRn+i8iWY5UAvYt3mJxBFJnAf9+jo/VZM3UN4xw=@redis:6379
      JWT_SECRET: 0lKDucCTqSt0gh1mbLsvF/d5mhXqCtEW8JfwWwbTeIk=
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://127.0.0.1:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - pytake-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  # Nginx Reverse Proxy with SSL
  nginx:
    image: nginx:alpine
    container_name: pytake-nginx-prod
    restart: always
    volumes:
      - ./nginx-ssl-simple.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./certbot/www:/var/www/certbot:ro
      - ./certbot/conf:/etc/letsencrypt:ro
    ports:
      - "80:80"
      - "443:443"
    networks:
      - pytake-network
    depends_on:
      - backend
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"

  # Certbot for SSL certificates
  certbot:
    image: certbot/certbot
    container_name: pytake-certbot
    volumes:
      - ./certbot/www:/var/www/certbot:rw
      - ./certbot/conf:/etc/letsencrypt:rw
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    networks:
      - pytake-network

networks:
  pytake-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local