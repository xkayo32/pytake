# PyTake - Podman Compose Configuration
# Compatible with both Podman and Docker Compose v2+
#
# Usage with Podman:
#   podman-compose up -d         (using podman-compose tool)
#   podman compose up -d         (using podman compose plugin)
#
# Usage with Docker:
#   docker compose up -d

services:
  # PostgreSQL - Main Database
  postgres:
    image: docker.io/library/postgres:15-alpine
    container_name: pytake-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: pytake
      POSTGRES_PASSWORD: pytake_dev_password
      POSTGRES_DB: pytake
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data:Z
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "pytake"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis - Cache & Queue
  redis:
    image: docker.io/library/redis:7-alpine
    container_name: pytake-redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data:Z
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MongoDB - Logs & Analytics
  mongodb:
    image: docker.io/library/mongo:7
    container_name: pytake-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_DATABASE: pytake_logs
    ports:
      - "${MONGODB_PORT:-27018}:27017"
    volumes:
      - mongodb_data:/data/db:Z
    healthcheck:
      test: ["CMD", "mongosh", "--quiet", "--eval", "db.adminCommand('ping').ok"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend - FastAPI
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: pytake-backend
    restart: unless-stopped
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    volumes:
      - ./backend:/app:z
      - backend_venv:/app/venv:Z
    env_file:
      - ./backend/.env.docker
    environment:
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONUNBUFFERED=1
      - HOST=0.0.0.0
      - WATCHFILES_FORCE_POLLING=true
      - POSTGRES_DB=pytake
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      mongodb:
        condition: service_healthy

  # Frontend - Next.js (Development Mode for Podman compatibility)
  frontend:
    image: docker.io/library/node:20-alpine
    container_name: pytake-frontend
    working_dir: /app
    command: sh -c "npm install && npm run dev"
    volumes:
      - ./frontend:/app:z
    ports:
      - "${FRONTEND_PORT:-3001}:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000/api/v1
      - NODE_ENV=development
      - DOCKER=true
    restart: unless-stopped
    depends_on:
      - backend

  # Nginx - Reverse Proxy
  nginx:
    image: docker.io/library/nginx:latest
    container_name: pytake-nginx
    restart: unless-stopped
    ports:
      - "8080:80"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro,Z
    depends_on:
      - frontend
      - backend

volumes:
  postgres_data:
  redis_data:
  mongodb_data:
  backend_venv:
  frontend_node_modules:

# Network configuration (optional, Podman creates default network)
# networks:
#   pytake-network:
#     driver: bridge
