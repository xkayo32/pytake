# ============================================================================
# Google Workspace Integration - Environment Variables
# ============================================================================
# 
# Copy this file to .env and configure with your actual Google Cloud Console values
#
# Steps to configure:
# 1. Go to https://console.cloud.google.com
# 2. Create a new project or select existing one
# 3. Enable these APIs:
#    - Google Sheets API
#    - Google Calendar API  
#    - Google Drive API
# 4. Go to "Credentials" -> "Create Credentials" -> "OAuth 2.0 Client ID"
# 5. Set Application type: Web application
# 6. Add authorized redirect URIs:
#    - http://localhost:8080/api/v1/google/callback (development)
#    - https://your-domain.com/api/v1/google/callback (production)
# 7. Copy Client ID and Client Secret below
# 8. Configure OAuth Consent Screen with required scopes
#
# ============================================================================

# Google OAuth 2.0 Credentials
# Required for all Google Workspace integrations
GOOGLE_CLIENT_ID=your-google-client-id.apps.googleusercontent.com
GOOGLE_CLIENT_SECRET=GOCSPX-your-google-client-secret
GOOGLE_REDIRECT_URI=http://localhost:8080/api/v1/google/callback

# ============================================================================
# PyTake Database Configuration
# ============================================================================
DATABASE_URL=postgres://pytake:password@localhost:5432/pytake
REDIS_URL=redis://default:password@localhost:6379

# ============================================================================  
# PyTake Authentication
# ============================================================================
JWT_SECRET=your-super-secret-jwt-key-change-in-production

# ============================================================================
# WhatsApp Integration (for workflow automation)
# ============================================================================
WHATSAPP_PHONE_NUMBER_ID=your-phone-number-id
WHATSAPP_ACCESS_TOKEN=your-whatsapp-access-token
WHATSAPP_WEBHOOK_VERIFY_TOKEN=your-webhook-verify-token

# ============================================================================
# Optional: Advanced Google Configuration
# ============================================================================

# Custom OAuth scopes (comma-separated)
# Default: sheets,drive,calendar
# GOOGLE_SCOPES=https://www.googleapis.com/auth/spreadsheets,https://www.googleapis.com/auth/drive,https://www.googleapis.com/auth/calendar

# Rate limiting configuration
# GOOGLE_RATE_LIMIT_REQUESTS_PER_SECOND=10
# GOOGLE_RATE_LIMIT_BURST_SIZE=50

# Cache configuration  
# GOOGLE_TOKEN_CACHE_TTL_SECONDS=3600
# GOOGLE_CONFIG_CACHE_TTL_SECONDS=300

# Retry configuration
# GOOGLE_MAX_RETRY_ATTEMPTS=3
# GOOGLE_RETRY_DELAY_SECONDS=1

# ============================================================================
# Production Security Settings
# ============================================================================

# Enable HTTPS redirect in production
# FORCE_HTTPS=true

# CORS allowed origins (comma-separated)
# CORS_ALLOWED_ORIGINS=https://your-frontend.com,https://your-dashboard.com

# Session configuration  
# SESSION_SECURE=true
# SESSION_HTTP_ONLY=true
# SESSION_SAME_SITE=Strict

# ============================================================================
# Monitoring & Logging
# ============================================================================

# Log level (error, warn, info, debug, trace)
RUST_LOG=info

# Enable Google API request logging
# GOOGLE_ENABLE_REQUEST_LOGGING=true

# Enable performance metrics
# GOOGLE_ENABLE_METRICS=true

# Webhook for monitoring alerts
# MONITORING_WEBHOOK_URL=https://your-monitoring.com/webhook

# ============================================================================
# Example Development Configuration
# ============================================================================
#
# For quick setup during development, you can use these example values:
# (Replace with your actual values from Google Cloud Console)
#
# GOOGLE_CLIENT_ID=123456789012-abcdefghijklmnop.apps.googleusercontent.com  
# GOOGLE_CLIENT_SECRET=GOCSPX-AbCdEfGhIjKlMnOpQrStUvWx
# GOOGLE_REDIRECT_URI=http://localhost:8080/api/v1/google/callback
# DATABASE_URL=postgres://pytake:password@localhost:5432/pytake
# REDIS_URL=redis://localhost:6379
# JWT_SECRET=development-jwt-secret-change-in-production
#
# ============================================================================

# ============================================================================
# Google Cloud Console Setup Checklist
# ============================================================================
#
# ☐ 1. Project created/selected in Google Cloud Console
# ☐ 2. Google Sheets API enabled
# ☐ 3. Google Calendar API enabled  
# ☐ 4. Google Drive API enabled
# ☐ 5. OAuth 2.0 credentials created (Web application type)
# ☐ 6. Authorized redirect URIs configured
# ☐ 7. OAuth consent screen configured
# ☐ 8. Required scopes added to consent screen:
#      ☐ ../auth/spreadsheets
#      ☐ ../auth/drive
#      ☐ ../auth/calendar
#      ☐ ../auth/calendar.events
# ☐ 9. Test users added (for development)
# ☐ 10. Credentials downloaded and configured in this file
#
# ============================================================================

# ============================================================================
# Required Scopes Explanation
# ============================================================================
#
# Google Sheets API:
# - https://www.googleapis.com/auth/spreadsheets
#   Read, write, and manage your spreadsheets
#
# Google Drive API:
# - https://www.googleapis.com/auth/drive  
#   See, edit, create, and delete all Google Drive files
# - https://www.googleapis.com/auth/drive.file
#   View and manage Google Drive files created by this app
#
# Google Calendar API:
# - https://www.googleapis.com/auth/calendar
#   See, edit, share, and permanently delete all calendars
# - https://www.googleapis.com/auth/calendar.events
#   View and edit events on all your calendars
#
# ============================================================================

# ============================================================================
# Testing Your Configuration
# ============================================================================
#
# After configuring the variables above, test your setup:
#
# 1. Start the PyTake backend:
#    cd backend/simple_api
#    cargo run
#
# 2. Test health endpoint:
#    curl http://localhost:8080/health
#
# 3. Test Google auth URL generation:
#    curl -X POST http://localhost:8080/api/v1/google/auth \
#      -H "Content-Type: application/json" \
#      -d '{"service":"all","user_id":"test","tenant_id":"demo"}'
#
# 4. Run the demo script:
#    python examples/google_integrations_demo.py
#
# 5. Access API documentation:
#    http://localhost:8080/docs
#
# ============================================================================