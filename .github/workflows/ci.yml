name: Continuous Integration

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Check code formatting and linting
  lint:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Check formatting
      run: |
        cd backend
        cargo fmt --all -- --check

    - name: Run clippy
      run: |
        cd backend
        cargo clippy --all-targets --all-features -- -D warnings

  # Security audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Run security audit
      run: |
        cd backend
        cargo audit

  # Unit and integration tests
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: pytake_test
          POSTGRES_USER: pytake
          POSTGRES_PASSWORD: pytake_test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    env:
      # Test database configuration
      TEST_DATABASE_URL: postgresql://pytake:pytake_test_password@localhost:5432/pytake_test
      DATABASE_URL: postgresql://pytake:pytake_test_password@localhost:5432/pytake_test
      REDIS_URL: redis://localhost:6379
      
      # Test configuration
      JWT_SECRET: test_jwt_secret_for_ci_only
      TEST_WHATSAPP_PHONE_ID: "test_phone_id"
      TEST_WHATSAPP_TOKEN: "test_token"
      TEST_PHONE_NUMBER: "+1234567890"
      
      # Skip external API tests in CI
      SKIP_EXTERNAL_TESTS: "true"
      ENABLE_REAL_EXTERNAL_CALLS: "false"

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          backend/target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('backend/**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Install Sea-ORM CLI
      run: cargo install sea-orm-cli

    - name: Setup test database
      run: |
        cd backend
        # Run database migrations
        sea-orm-cli migrate up --database-url $TEST_DATABASE_URL || echo "Migration failed, continuing with tests"

    - name: Build project
      run: |
        cd backend
        cargo build --verbose

    - name: Run unit tests
      run: |
        cd backend
        cargo test --lib --verbose
        
    - name: Run integration tests (with services)
      run: |
        cd backend
        cargo test --test integration_tests --verbose
        
    - name: Run all simple_api tests
      run: |
        cd backend
        cargo test --package simple_api --verbose

  # Test coverage
  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    needs: test
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: pytake_test
          POSTGRES_USER: pytake
          POSTGRES_PASSWORD: pytake_test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    env:
      TEST_DATABASE_URL: postgresql://pytake:pytake_test_password@localhost:5432/pytake_test
      DATABASE_URL: postgresql://pytake:pytake_test_password@localhost:5432/pytake_test
      REDIS_URL: redis://localhost:6379
      JWT_SECRET: test_jwt_secret_for_ci_only
      SKIP_EXTERNAL_TESTS: "true"
      ENABLE_REAL_EXTERNAL_CALLS: "false"

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Install tarpaulin
      run: cargo install cargo-tarpaulin

    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          backend/target/
        key: ${{ runner.os }}-cargo-coverage-${{ hashFiles('backend/**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-coverage-
          ${{ runner.os }}-cargo-

    - name: Generate code coverage
      run: |
        cd backend
        cargo tarpaulin --verbose --all-features --workspace \
          --exclude-files "**/tests/*" \
          --exclude-files "target/*" \
          --timeout 120 \
          --out xml \
          --output-dir ../coverage

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/cobertura.xml
        flags: backend
        name: backend-coverage
        fail_ci_if_error: false

    - name: Generate coverage report
      run: |
        cd backend
        cargo tarpaulin --verbose --all-features --workspace \
          --exclude-files "**/tests/*" \
          --exclude-files "target/*" \
          --timeout 120 \
          --out html \
          --output-dir ../coverage-html

    - name: Upload coverage HTML report
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: coverage-html/

  # Build and test Docker image
  docker:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [lint, test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: |
        docker build -t pytake:test -f Dockerfile .

    - name: Test Docker image
      run: |
        # Test that the image starts successfully
        docker run --rm -d --name pytake-test \
          -e DATABASE_URL=postgresql://test:test@localhost:5432/test \
          -e REDIS_URL=redis://localhost:6379 \
          -e JWT_SECRET=test_secret \
          -p 8080:8080 \
          pytake:test &
        
        # Wait a bit for startup
        sleep 10
        
        # Test health endpoint (if available)
        # docker exec pytake-test curl -f http://localhost:8080/health || echo "Health check failed"
        
        # Stop the container
        docker stop pytake-test || echo "Container already stopped"

  # Performance and load tests
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: pytake_test
          POSTGRES_USER: pytake
          POSTGRES_PASSWORD: pytake_test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379

    env:
      TEST_DATABASE_URL: postgresql://pytake:pytake_test_password@localhost:5432/pytake_test
      REDIS_URL: redis://localhost:6379
      JWT_SECRET: test_jwt_secret_for_ci_only
      SKIP_EXTERNAL_TESTS: "true"

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          backend/target/
        key: ${{ runner.os }}-cargo-perf-${{ hashFiles('backend/**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-perf-
          ${{ runner.os }}-cargo-

    - name: Run performance tests
      run: |
        cd backend
        cargo test --package simple_api --release -- --ignored performance
        
    - name: Install criterion benchmarks
      run: |
        cd backend
        cargo install cargo-criterion || echo "Criterion not available"

    # - name: Run benchmarks
    #   run: |
    #     cd backend
    #     cargo criterion || echo "No benchmarks configured"

# Deployment job (only on main branch)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [lint, test, coverage, docker]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add actual deployment commands here
        # This could include:
        # - Building and pushing Docker images to registry
        # - Updating Kubernetes deployments
        # - Running deployment scripts
        echo "Staging deployment completed"

  # Security scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Notification on completion
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [lint, test, coverage, docker]
    if: always()
    
    steps:
    - name: Notify on success
      if: ${{ needs.test.result == 'success' && needs.lint.result == 'success' }}
      run: |
        echo "✅ All checks passed successfully!"
        
    - name: Notify on failure
      if: ${{ needs.test.result == 'failure' || needs.lint.result == 'failure' }}
      run: |
        echo "❌ Some checks failed. Please review the logs."
        exit 1