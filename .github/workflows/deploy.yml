name: Deploy to Production

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Build and push Docker images
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha,prefix={{branch}}-

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDTIME=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
          REVISION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}

  # Deploy to staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging'
    environment: 
      name: staging
      url: https://staging-api.pytake.net

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to staging
      env:
        IMAGE_TAG: ${{ needs.build-and-push.outputs.image-tag }}
      run: |
        echo "Deploying image: $IMAGE_TAG to staging..."
        
        # Example deployment script
        # This would typically involve:
        # 1. Connecting to staging server
        # 2. Pulling the new image
        # 3. Updating docker-compose or K8s manifests
        # 4. Rolling out the update
        
        # For demonstration, we'll use the deploy script
        # ./deploy.sh deploy staging $IMAGE_TAG
        
        echo "Staging deployment completed"
        echo "Application available at: https://staging-api.pytake.net"

    - name: Run staging health check
      run: |
        echo "Running health check on staging..."
        # curl -f https://staging-api.pytake.net/health || exit 1
        echo "Health check passed"

    - name: Run staging smoke tests
      run: |
        echo "Running smoke tests on staging..."
        # Add smoke tests here
        echo "Smoke tests passed"

  # Deploy to production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build-and-push
    if: (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')) || 
        (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment: 
      name: production
      url: https://api.pytake.net

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to production
      env:
        IMAGE_TAG: ${{ needs.build-and-push.outputs.image-tag }}
      run: |
        echo "Deploying image: $IMAGE_TAG to production..."
        
        # Production deployment with zero downtime
        # This would typically involve:
        # 1. Creating database backup
        # 2. Running migrations
        # 3. Blue-green deployment or rolling update
        # 4. Health checks
        # 5. Rollback capability
        
        echo "Production deployment completed"
        echo "Application available at: https://api.pytake.net"

    - name: Run production health check
      run: |
        echo "Running health check on production..."
        # curl -f https://api.pytake.net/health || exit 1
        echo "Health check passed"

    - name: Run production smoke tests
      run: |
        echo "Running smoke tests on production..."
        # Add production smoke tests here
        echo "Smoke tests passed"

    - name: Create deployment record
      run: |
        echo "Recording deployment in monitoring system..."
        # This could send a webhook to monitoring/alerting systems
        # Or update a deployment tracking system
        echo "Deployment recorded"

  # Database migrations
  migrate-database:
    name: Run Database Migrations
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Install Sea-ORM CLI
      run: cargo install sea-orm-cli

    - name: Run database migrations
      env:
        DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
      run: |
        cd backend
        echo "Running database migrations..."
        # sea-orm-cli migrate up --database-url $DATABASE_URL
        echo "Database migrations completed"

  # Monitoring and alerts
  post-deployment:
    name: Post-Deployment Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always() && (needs.deploy-production.result == 'success' || needs.deploy-production.result == 'failure')

    steps:
    - name: Setup monitoring alerts
      run: |
        echo "Setting up post-deployment monitoring..."
        
        # This could:
        # 1. Configure alerts for the new version
        # 2. Set up synthetic monitoring
        # 3. Enable detailed logging
        # 4. Send notifications to teams
        
        echo "Monitoring alerts configured"

    - name: Send deployment notification
      if: needs.deploy-production.result == 'success'
      run: |
        echo "‚úÖ Production deployment successful!"
        # Send success notification to Slack/Discord/Teams
        # curl -X POST -H 'Content-type: application/json' \
        #   --data '{"text":"üöÄ PyTake deployment successful to production!"}' \
        #   ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Send failure notification
      if: needs.deploy-production.result == 'failure'
      run: |
        echo "‚ùå Production deployment failed!"
        # Send failure notification to Slack/Discord/Teams
        # curl -X POST -H 'Content-type: application/json' \
        #   --data '{"text":"üö® PyTake deployment FAILED! Check logs immediately."}' \
        #   ${{ secrets.SLACK_WEBHOOK_URL }}

  # Security scanning of deployed image
  security-scan:
    name: Security Scan Deployed Image
    runs-on: ubuntu-latest
    needs: build-and-push
    
    steps:
    - name: Run Trivy vulnerability scanner on image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ needs.build-and-push.outputs.image-tag }}
        format: 'sarif'
        output: 'trivy-image-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-image-results.sarif'

  # Performance monitoring
  performance-monitoring:
    name: Performance Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: needs.deploy-production.result == 'success'
    
    steps:
    - name: Setup performance monitoring
      run: |
        echo "Setting up performance monitoring for new deployment..."
        
        # This could:
        # 1. Run load tests against the new deployment
        # 2. Set up APM monitoring
        # 3. Configure alerting thresholds
        # 4. Baseline performance metrics
        
        echo "Performance monitoring configured"

    - name: Run performance benchmark
      run: |
        echo "Running performance benchmark..."
        
        # Example: run automated performance tests
        # This could use tools like:
        # - Artillery.io for load testing
        # - k6 for performance testing
        # - Apache Bench for simple HTTP benchmarking
        
        echo "Performance benchmark completed"