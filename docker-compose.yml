services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: pytake-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-pytake_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-Odc7/ffNnTnG4hkbwV+Sx2ZgK61rXW2r9U2o7Rd25DU=}
      POSTGRES_DB: ${POSTGRES_DB:-pytake}
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - pytake-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-pytake_user}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: pytake-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-gOe7JRn+i8iWY5UAvYt3mJxBFJnAf9+jo/VZM3UN4xw=}
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
    networks:
      - pytake-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Go Backend API
  backend:
    build:
      context: ./backend-go
      dockerfile: Dockerfile
    container_name: pytake-backend
    restart: unless-stopped
    ports:
      - "8080:8080"
    volumes:
      - ./.env:/app/.env:ro
    environment:
      # Database
      # DATABASE_URL: postgresql://${POSTGRES_USER:-pytake_user}:${POSTGRES_PASSWORD:-Odc7/ffNnTnG4hkbwV+Sx2ZgK61rXW2r9U2o7Rd25DU=}@postgres:5432/${POSTGRES_DB:-pytake}?sslmode=disable
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: ${POSTGRES_USER:-pytake_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-Odc7/ffNnTnG4hkbwV+Sx2ZgK61rXW2r9U2o7Rd25DU=}
      POSTGRES_DB: ${POSTGRES_DB:-pytake}
      
      # Redis
      REDIS_URL: redis://default:gOe7JRn%2Bi8iWY5UAvYt3mJxBFJnAf9%2Bjo%2FVZM3UN4xw%3D@redis:6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-gOe7JRn+i8iWY5UAvYt3mJxBFJnAf9+jo/VZM3UN4xw=}
      
      # Server
      PORT: 8080
      NODE_ENV: production
      GIN_MODE: release
      
      # Auth
      JWT_SECRET: ${JWT_SECRET:-0lKDucCTqSt0gh1mbLsvF/d5mhXqCtEW8JfwWwbTeIk=}
      
      # WhatsApp
      WHATSAPP_API_TOKEN: ${WHATSAPP_API_TOKEN}
      WHATSAPP_VERIFY_TOKEN: ${WHATSAPP_VERIFY_TOKEN}
      WHATSAPP_WEBHOOK_URL: ${WHATSAPP_WEBHOOK_URL:-https://api.pytake.net/webhook/whatsapp}
      
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - pytake-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Next.js Frontend
  frontend:
    image: node:20-alpine
    container_name: pytake-frontend
    restart: unless-stopped
    working_dir: /app
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      NODE_ENV: development
      NEXT_TELEMETRY_DISABLED: 1
      NEXT_PUBLIC_API_URL: https://api.pytake.net
      WATCHPACK_POLLING: true
      CHOKIDAR_USEPOLLING: true
    command: >
      sh -c "
        echo 'ðŸ“¦ Installing dependencies...' &&
        npm install &&
        echo 'ðŸš€ Starting development server...' &&
        npm run dev
      "
    depends_on:
      - backend
    networks:
      - pytake-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: pytake-nginx
    restart: unless-stopped
    ports:
      - "8081:80"
      - "8443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - ./nginx-ssl:/etc/letsencrypt:ro
      - ./certbot/conf:/etc/letsencrypt:ro
      - ./certbot/www:/var/www/certbot:ro
    depends_on:
      - backend
      - frontend
    networks:
      - pytake-network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 3s
      retries: 3

  # Let's Encrypt SSL Certificate Management
  certbot:
    image: certbot/certbot
    container_name: pytake-certbot
    restart: unless-stopped
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    command: /bin/sh -c "trap exit TERM; while :; do certbot renew; sleep 12h & wait $!; done;"
    networks:
      - pytake-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  pytake-network:
    driver: bridge