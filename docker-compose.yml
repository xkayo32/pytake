# Docker Compose file for PyTake Backend

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: pytake-postgres
    restart: unless-stopped
    ports:
      - "${POSTGRES_EXTERNAL_PORT:-5432}:${POSTGRES_PORT:-5432}"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_INITDB_ARGS: "-E UTF8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
    networks:
      - pytake-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: ${HEALTH_CHECK_INTERVAL:-30s}
      timeout: ${HEALTH_CHECK_TIMEOUT:-10s}
      retries: ${HEALTH_CHECK_RETRIES:-3}

  # Redis Cache/Queue
  redis:
    image: redis:7-alpine
    container_name: pytake-redis
    restart: unless-stopped
    ports:
      - "${REDIS_EXTERNAL_PORT:-6379}:${REDIS_PORT:-6379}"
    command: redis-server --requirepass ${REDIS_PASSWORD} --maxmemory ${REDIS_MAX_MEMORY:-256mb} --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - pytake-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: ${HEALTH_CHECK_INTERVAL:-30s}
      timeout: ${HEALTH_CHECK_TIMEOUT:-10s}
      retries: ${HEALTH_CHECK_RETRIES:-3}

  # Backend API
  backend:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - API_PORT=8080
        - API_HOST=${API_HOST}
    container_name: pytake-backend
    restart: unless-stopped
    ports:
      - "${API_PORT:-8789}:8080"
    environment:
      # Database
      DATABASE_URL: ${DATABASE_URL}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      
      # Redis
      REDIS_URL: ${REDIS_URL}
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      
      # JWT
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRATION: ${JWT_EXPIRATION:-86400}
      
      # WhatsApp
      WHATSAPP_PHONE_NUMBER_ID: ${WHATSAPP_PHONE_NUMBER_ID}
      WHATSAPP_ACCESS_TOKEN: ${WHATSAPP_ACCESS_TOKEN}
      WHATSAPP_WEBHOOK_VERIFY_TOKEN: ${WHATSAPP_WEBHOOK_VERIFY_TOKEN}
      WHATSAPP_BUSINESS_ACCOUNT_ID: ${WHATSAPP_BUSINESS_ACCOUNT_ID}
      
      # App Settings
      RUST_LOG: ${RUST_LOG:-info}
      BIND_ADDRESS: ${BIND_ADDRESS:-0.0.0.0:8080}
      CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS:-*}
      API_HOST: ${API_HOST:-0.0.0.0}
      API_PORT: ${API_PORT:-8080}
      APP_ENV: ${APP_ENV:-development}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - pytake-network
    volumes:
      - ${UPLOADS_PATH:-./uploads}:/app/uploads
      - ${LOGS_PATH:-./logs}:/app/logs

  # Nginx Reverse Proxy
  nginx:
    build:
      context: .
      dockerfile: nginx.Dockerfile
    container_name: pytake-nginx
    restart: unless-stopped
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    environment:
      - SERVER_NAME=${SERVER_NAME:-localhost}
      - DOMAIN_NAME=${DOMAIN_NAME:-localhost}
      - BACKEND_HOST=backend
      - BACKEND_PORT=8080
      - CLIENT_MAX_BODY_SIZE=${CLIENT_MAX_BODY_SIZE:-50M}
      - API_RATE_LIMIT=${API_RATE_LIMIT:-10r/s}
      - WEBHOOK_RATE_LIMIT=${WEBHOOK_RATE_LIMIT:-50r/s}
      - CONNECTION_LIMIT=${CONNECTION_LIMIT:-10}
      - SSL_ENABLED=${SSL_ENABLED:-false}
    volumes:
      - ${SSL_PATH:-./ssl}:/etc/nginx/ssl:ro
      - nginx_cache:/var/cache/nginx
      - ./certbot-webroot:/var/www/certbot:ro
    depends_on:
      - backend
    networks:
      - pytake-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: ${HEALTH_CHECK_INTERVAL:-30s}
      timeout: ${HEALTH_CHECK_TIMEOUT:-10s}
      retries: ${HEALTH_CHECK_RETRIES:-3}

networks:
  pytake-network:
    driver: bridge
    ipam:
      config:
        - subnet: ${DOCKER_NETWORK_SUBNET:-172.20.0.0/16}

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  nginx_cache:
    driver: local