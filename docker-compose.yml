version: "3.8"

services:
  # PostgreSQL - Main Database
  postgres:
    image: postgres:15-alpine
    container_name: pytake-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: pytake
      POSTGRES_PASSWORD: pytake_dev_password
      POSTGRES_DB: pytake
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data

    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U pytake"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis - Cache & Queue
  redis:
    image: redis:7-alpine
    container_name: pytake-redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MongoDB - Logs & Analytics
  mongodb:
    image: mongo:7
    container_name: pytake-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_DATABASE: pytake_logs
    ports:
      - "${MONGODB_PORT:-27018}:27017"
    volumes:
      - mongodb_data:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend - FastAPI
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: pytake-backend
    restart: unless-stopped
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    volumes:
      - ./backend:/app
      - backend_venv:/app/venv
    env_file:
      - ./backend/.env.docker
    environment:
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONUNBUFFERED=1
      - HOST=0.0.0.0
      - WATCHFILES_FORCE_POLLING=true
      - POSTGRES_DB=pytake
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      mongodb:
        condition: service_healthy

  # Frontend - Next.js
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
      args:
        - DOCKER=true
    container_name: pytake-frontend
    restart: unless-stopped
    ports:
      - "${FRONTEND_PORT:-3001}:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    environment:
      - DOCKER=true
      - WATCHPACK_POLLING=true
    depends_on:
      - backend

  # Nginx - Proxy reverso
  nginx:
    image: nginx:latest
    container_name: pytake-nginx
    restart: unless-stopped
    ports:
      - "8080:80"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - frontend
      - backend

volumes:
  postgres_data:
  redis_data:
  mongodb_data:
  backend_venv:
  frontend_node_modules:
